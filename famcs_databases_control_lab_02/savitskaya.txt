--Лабораторная выполняется в СУБД  Oracle. 
--Скопируйте файлы EDU3.txt  в каталог C:\TEMP.
--Раскройте файл и ознакомтесь со скриптом создания и заполнения таблиц для выполнения лабораторной. Таблица Bonus имеет дополнительный столбец tax (налог) со значениями null.  
--Произведите запуск инструментария Oracle и соеденитесь с БД.  Запустите скрипты EDU3.txt на выполнение.
--Вставте в эту строку Ваши ФИО, номер группы, курса. ФИО Савицкая Елизавета Дмитриевна, группа 4, курс 4.      
--Файл с отчётом о выполнении лабораторной создаётся путём вставки, созданных Вами скриптов.
--Файл отчёта именуется фамилией студента  в английской транскрипции, с расширением .txt и сохраняется в  edufpmi.bsu.by (при возникновении непредвиденной ситуации,
--приводящей к невозможности сохранения в edufpmi.bsu.by, высылается на почту преподавателя до дедлайна).
--НЕ ДОПУСКАЕТСЯ УДАЛЕНИЕ ЛЮБЫХ (в том числе и первых) СТРОК ИЗ ДАННОГО ТЕКСТА, И ОПЕРАТОРА ROLLBACK!!!
--РАБОТА ВЫПОЛНЯЕТСЯ ИНДИВИДУАЛЬНО!!!
--ПРИ НЕПРАВИЛЬНОМ ОФОРМЛЕНИИ ИЛИ КОПИРОВАНИИ У ДРУГОГО СТУДЕНТА, РАБОТА НЕ ПРОВЕРЯЕТСЯ И ПОЛУЧАЕТ ОЦЕНКУ 0!!!    
--Вам необходимо создать представление, занести данные за октябрь текущего года о начислении премий, создать
--ананимные (не хранимые) блоки для начисления помесячного налога на прибыль  за все годы (c 2016 по 2021 включительно) и занесения его в соответсвующие записи таблицы Bonus.
--Налог вычисляется по следующему правилу (многоступенчатое прогрессивное налогообложение):
--налог равен 10% от той части Sn1 начисленной в n-ом месяце премии Sn, которая в сумме с суммарной премией (S1+S2+...Sn-1) с начала года до начала рассматриваемого 
--n-го месяца (за n-1 месяц) даёт велечину, не превышающую 600, т.е. (S1+S2+...Sn-1+Sn1)<=600;
--налог равен 13% от той части Sn2 начисленной в n-ом месяце премии Sn, которая в сумме с (S1+S2+...Sn-1+Sn1) больше 600, но не превышает 1100, т.е
--600<(S1+S2+...Sn-1+Sn1+Sn2)<=1100;
--налог равен 15% от той части Sn3 начисленной в n-ом месяце премии Sn, которая в сумме с (S1+S2+...Sn-1+Sn1+Sn2) больше 1100, т.е. 1100<(S1+S2+...Sn-1+Sn1+Sn2+Sn3).
--Естественно, Sn=Sn1+Sn2+Sn3 и налог в n-ом месяце рассматриваемого года равен 0,1*Sn1+0,13*Sn2+0,15*Sn3, n=1,2,...,12.
--Тексты заданий: 
--1. Создайте представление с именем BonusView, содержащее четыре первых столбца (empno, month, year, bonvalue) таблицы Bonus.
CREATE VIEW BonusView AS SELECT empno, month, year, bonvalue FROM Bonus;

--2. Вставте в таблицу Bonus через представление BonusView следующие записи
--(503, 10, 2021, 500)
--(601, 10, 2021, 1000)
INSERT INTO BonusView VALUES (503, 10, 2021, 500);
INSERT INTO BonusView VALUES (601, 10, 2021, 1000);

--3. Удалите представление BonusView.
DROP VIEW BonusView;

--4. Составьте программу (в виде ананимного блока PL/SQL) вычисления налога и вставки его в таблицу Bonus:
--a) с помощью простого цикла (loop) с курсором и оператора if или опретора case;
DECLARE
    i NUMBER := 1;
    current_emp NUMBER := 0;
    payed_bonus NUMBER := 0;
    payed_in_month_bonus NUMBER := 0;
    counter NUMBER := 0;
BEGIN
    select COUNT(*) into counter from BONUS;
    LOOP
        LOG_P(to_char(i));
        select EMPNO into current_emp from BONUS offset i - 1 rows fetch next 1 row only;
        select SUM(BONVALUE)
        into payed_bonus
        from BONUS
        where EMPNO = current_emp
          and YEAR = extract(year from current_date)
          and BONUS.MONTH <= extract(month from current_date);
        select BONVALUE
        into payed_in_month_bonus
        from BONUS
        where ROWNUM = i;
        if payed_bonus + payed_in_month_bonus <= 600 then
            UPDATE BONUS
            SET TAX = 0.1 * payed_in_month_bonus
            where ROWNUM = i;
        else
            if payed_bonus + payed_in_month_bonus > 600 and payed_bonus <= 1100 then
                UPDATE BONUS
                SET TAX = 0.13 * payed_in_month_bonus
                where ROWNUM = i;
            else
                if payed_bonus + payed_in_month_bonus > 1100 then
                    UPDATE BONUS
                    SET TAX = 0.15 * payed_in_month_bonus
                    where ROWNUM = i;
                end if;
            end if;
        end if;
        i := i + 1;
        if i = counter then
            exit;
        end if;
    END LOOP;
END;
rollback;
-- b)   с помощью курсорного цикла FOR;

rollback;
-- c) с помощью курсора с параметром, передавая номер сотрудника, для которого необходимо посчитать налог. 

rollback;
--5.   Создайте хранимую процедуру ProCountTax, вычисления налога и вставки его в таблицу Bonus за всё время начислений для конкретного сотрудника. 
--В качестве параметров передать проценты налога (до 600 (<=600), от 601 до 1100 (600< и <=1100), выше 1100 (1100<)), номер сотрудника.


--6.   Создайте хранимую функцию FunCountTax, вычисляющую суммарный налог на премию сотрудника за всё время начислений (2016-2021 гг.). В качестве параметров передать 
--процент налога (до 600, от 601 до 1100 , выше 1100), номер сотрудника. Возвращаемое значение – суммарный налог.


--7. Удалите процедуру ProCountTax и функцию FunCountTax.


--8. Удалите из талюицы Bonus записи за октябрь 2021 года.

 



  
    